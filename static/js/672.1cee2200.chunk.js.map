{"version":3,"file":"static/js/672.1cee2200.chunk.js","mappings":"0JACA,QAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,aCEjN,MAUA,EAVoBA,IAEhBC,EAAAA,EAAAA,MAAA,OAAKC,UAAS,GAAAC,OAAKC,EAAc,KAAAD,OAAIC,GAAiBC,SAAA,EACpDC,EAAAA,EAAAA,KAAA,OAAKC,IAAKP,EAAMQ,UAChBF,EAAAA,EAAAA,KAACG,EAAAA,GAAO,CAACC,GAAI,YAAcV,EAAMW,GAAGN,SAAEL,EAAMY,UCClD,EANiBZ,IAEfM,EAAAA,EAAAA,KAAA,OAAKJ,UAAWE,EAAgBC,UAACC,EAAAA,EAAAA,KAAA,KAAAD,SAAIL,EAAMa,Y,OCG7C,MAmDA,EAjDiBb,IACf,IAAIc,EAAQd,EAAMe,YAEdC,EAAkBF,EAAMG,QAAQC,KAAKC,IACvCb,EAAAA,EAAAA,KAACc,EAAU,CAACZ,OAAQW,EAAEX,OAAQI,KAAMO,EAAEP,KAAiBD,GAAIQ,EAAER,IAAZQ,EAAER,MAGjDU,EAAmBP,EAAMQ,SAASJ,KAAKK,IACzCjB,EAAAA,EAAAA,KAACkB,EAAO,CAACX,QAASU,EAAEV,QAAoBF,GAAIY,EAAEZ,IAAZY,EAAEZ,MAGtC,MAAM,SAAEc,EAAQ,aAAEC,EAAY,MAAEC,EAAOC,WAAW,OAChDC,KACKC,EAAAA,EAAAA,IAAQ,CACbC,KAAM,aAQR,OACE9B,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAgBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAKJ,UAAWE,EAAqBC,SAAEW,KACvCf,EAAAA,EAAAA,MAAA,OAAKC,UAAWE,EAAiBC,SAAA,CAC9BgB,GACDpB,EAAAA,EAAAA,MAAA,QAAM+B,SAAUN,GAVJO,IAChBjC,EAAMkC,YAAYD,EAASE,gBAC3BR,GAAO,IAQoCtB,SAAA,EACrCJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAA,YACMmB,EAAS,iBAAkB,CAC7BW,SAAU,0BACVC,UAAW,CACTC,MAnCS,GAoCTzB,QAAQ,iBAADV,OApCE,GAoCmC,iBAIjD0B,EAAOM,iBAAmB7B,EAAAA,EAAAA,KAAA,OAAKiC,MAAO,CAAEC,MAAO,OAAOnC,SAAEwB,EAAOM,eAAetB,cAEjFP,EAAAA,EAAAA,KAAA,OAAAD,UACAC,EAAAA,EAAAA,KAAA,SAAOmC,KAAK,SAASH,MAAM,2BAI3B,E,sBC9BV,SAAeI,E,OAAAA,KACbC,EAAAA,EAAAA,KAhBqB7B,IACd,CACLC,YAAaD,EAAMC,gBAIG6B,IACjB,CACLV,YAAcC,IACZS,GAASC,EAAAA,EAAAA,GAAyBV,GAAgB,MAQtDW,EAAAA,EAFF,CAICC,E,uECxBD,IAAIC,EAA8BlC,IAAK,CACnCmC,OAAQnC,EAAMoC,KAAKD,SAGhB,MAAMH,EAAoBK,IAOMR,EAAAA,EAAAA,IAAQK,EAARL,EANZ3C,GAClBA,EAAMiD,QACJ3C,EAAAA,EAAAA,KAAC6C,EAAS,IAAKnD,KADIM,EAAAA,EAAAA,KAAC8C,EAAAA,GAAQ,CAAC1C,GAAI,Y","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oyD3j\",\"dialogsItems\":\"Dialogs_dialogsItems__BBdgV\",\"dialog\":\"Dialogs_dialog__nRpUQ\",\"active\":\"Dialogs_active__MB+MJ\",\"messages\":\"Dialogs_messages__CTYyH\",\"message\":\"Dialogs_message__w4zKK\"};","import { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogs.module.css\";\r\n\r\nconst DialogItem = (props) => {\r\n  return (\r\n    <div className={`${classes.dialog} ${classes.active}`}>\r\n      <img src={props.avatar} />\r\n      <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default DialogItem;\r\n","import classes from \"./../Dialogs.module.css\";\r\n\r\nconst Message = (props) => {\r\n  return (\r\n  <div className={classes.message}><p>{props.message}</p></div>\r\n  )\r\n}\r\n\r\nexport default Message;\r\n","import { useForm } from \"react-hook-form\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport classes from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport React from \"react\";\r\n\r\n\r\nconst MAX_MESSAGE_LENGTH = 50;\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.dialogsPage;\r\n\r\n  let dialogsElements = state.dialogs.map((d) => (\r\n    <DialogItem avatar={d.avatar} name={d.name} key={d.id} id={d.id} />\r\n  ));\r\n\r\n  let messagesElements = state.messages.map((m) => (\r\n    <Message message={m.message} key={m.id} id={m.id} />\r\n  ));\r\n\r\n  const { register, handleSubmit, reset, formState: {\r\n    errors\r\n  }, } = useForm({\r\n    mode: 'onChange'\r\n  });\r\n\r\n  const onSubmit = (formData) => {\r\n    props.sendMessage(formData.newMessageText);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\r\n      <div className={classes.messages}>\r\n        {messagesElements}\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <div>\r\n            <input\r\n              {...register(\"newMessageText\", {\r\n                required: \"This field is required.\",\r\n                maxLength: {\r\n                  value: MAX_MESSAGE_LENGTH,\r\n                  message: `Max length is ${MAX_MESSAGE_LENGTH} symbols`,\r\n                },\r\n              })}\r\n            />\r\n            {errors.newMessageText && (<div style={{ color: 'red'}}>{errors.newMessageText.message}</div>)}\r\n          </div>\r\n          <div>\r\n          <input type=\"submit\" value=\"Send Message\" />\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import {\r\n  sendMessageActionCreator\r\n} from \"../../redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogsPage: state.dialogsPage,\r\n  }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    sendMessage: (newMessageText) => {\r\n      dispatch(sendMessageActionCreator(newMessageText));\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)\r\n(Dialogs);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n  });\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n  let RedirectComponent = (props) => {\r\n    if (!props.isAuth) return <Navigate to={\"/login\"} />;\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  \r\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n  return ConnectedAuthRedirectComponent;\r\n};\r\n\r\n"],"names":["props","_jsxs","className","concat","classes","children","_jsx","src","avatar","NavLink","to","id","name","message","state","dialogsPage","dialogsElements","dialogs","map","d","DialogItem","messagesElements","messages","m","Message","register","handleSubmit","reset","formState","errors","useForm","mode","onSubmit","formData","sendMessage","newMessageText","required","maxLength","value","style","color","type","compose","connect","dispatch","sendMessageActionCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","Navigate"],"sourceRoot":""}